// src/taskpane/services/dialog/DialogStateService.ts

import { v4 as uuidv4 } from "uuid";

/**
 * A simple service that uses browser sessionStorage to pass larger data payloads
 * from the task pane to the dialog.
 */
class DialogStateService {
  /**
   * Stores the provided data in sessionStorage under a unique key.
   * @param data The data payload to be stored.
   * @returns The unique session ID (key) under which the data is stored.
   */
  public storeData(data: any): string {
    const sessionId = uuidv4();
    try {
      const serializedData = JSON.stringify(data);
      sessionStorage.setItem(sessionId, serializedData);
      console.log(`[DialogStateService] Stored data for session: ${sessionId}`);
      console.log("[DialogStateService] Task Pane sessionStorage snapshot AFTER write:", { ...sessionStorage });

      return sessionId;
    } catch (error) {
      console.error("[DialogStateService] Failed to serialize or store data.", error);
      throw new Error("Could not store initial data for the dialog.");
    }
  }

  /**
   * Retrieves data from sessionStorage using the provided session ID.
   * @param sessionId The unique ID generated by the `storeData` method.
   * @returns The deserialized data object, or null if not found.
   */
  public retrieveAndClearData(sessionId: string): any | null {
    const serializedData = sessionStorage.getItem(sessionId);
    if (!serializedData) {
      console.warn(`[DialogStateService] No data found for session: ${sessionId}`);
      return null;
    }

    try {
      console.log(`[DialogStateService] Retrieved data for session: ${sessionId}. Clearing.`);
      sessionStorage.removeItem(sessionId);
      return JSON.parse(serializedData);
    } catch (error) {
      console.error(`[DialogStateService] Failed to parse data for session: ${sessionId}.`, error);
      return null;
    }
  }
}

// Export a singleton instance.
export const dialogStateService = new DialogStateService();